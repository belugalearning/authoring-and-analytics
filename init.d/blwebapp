#!/bin/bash

### BEGIN INIT INFO
# Provides:          authoring-and-analytics
# Short-Description: Start daemon at boot time
# Description:       Enable service provided by daemon.
# Required-Start:    $all
# Required-Stop:     $remote_fs $syslog
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# pidfile: /var/run/blws/blwebapp.pid
# logfile: /var/log/blws/blwebapp.log
# outfile: /var/log/blws/blwebapp.out
### END INIT INFO

# Source function library.
. /lib/lsb/init-functions

path=$path:/user/local/bin

USER=blws
NAME=blwebapp
APPDIR=/usr/local/lib/ws-monolith
pidfile=/usr/local/var/run/blws/$NAME.pid
logfile=/usr/local/var/log/blws/$NAME.log
outfile=/usr/local/var/log/blws/$NAME.out

node=/usr/local/bin/node
forever=/usr/local/bin/forever
sed=sed

start() {
    echo "Starting $NAME node instance: "

    if [ "$foreverid" == "" ]; then
        # Create the log and pid files, making sure that the target use has access to them
        touch $logfile
        chown $USER: $logfile

        touch $dupefile
        chown $USER: $outfile

        touch $pidfile
        chown $USER: $pidfile

        # Launch the application -- when absolutely sure that everything written to outfile is a duplicate, have option "-o /dev/null"
        command="$forever start --pidFile $pidfile -o $outfile -l $logfile -e $logfile -a -d $APPDIR"
        echo $command
        su $USER -c "$command"
    else
        echo "Instance already running"
    fi
    RETVAL=$?
}

restart() {
    echo -n "Restarting $NAME node instance : "
    if [ "$foreverid" != "" ]; then
        command="$forever restart $APPDIR"
        su $USER -c "$command"
        RETVAL=$?
    else
        start
    fi
}

stop() {
    echo -n "Shutting down $NAME node instance : "
    if [ "$foreverid" != "" ]; then
        command="$forever stop $APPDIR"
        su $USER -c "$command"
    else
        echo "Instance is not running";
    fi
    RETVAL=$?
}

if [ -f $pidfile ]; then
    read pid < $pidfile
else
    pid = ""
fi

if [ "$pid" != "" ]; then
    sed1="s/\x1b\[[0-9]*m//g" # strip colours
    sed2="/$pid/p" # only line with pid
    sed3="s/.*\s\+$pid\s\+\([0-9]\+\).*/\1/" # forever id comes after pid
    foreverid=`su $USER -c "forever list" | $sed "$sed1" | $sed -n "$sed2" | $sed "$sed3"`
else
    foreverid=""
fi

case "$1" in
    start)
        start
        ;;
    stop)
        stop
        ;;
    status)
        status -p ${pidfile}
        ;;
    restart)
        restart
        ;;
    *)
        echo "Usage:  {start|stop|status|restart}"
        exit 1
        ;;
esac
exit $RETVAL
